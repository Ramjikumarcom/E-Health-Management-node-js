pipeline {
    agent any
    
    environment {
        // Docker Hub credentials ID as configured in Jenkins
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        // Your Docker Hub username
        DOCKER_USERNAME = 'gupta9939'
        // Application version/tag
        APP_VERSION = '02'
        // GitHub repository URL
        GITHUB_REPO = 'https://github.com/Ramjikumarcom/E-Health-Management-node-js.git'
        // GitHub branch
        GITHUB_BRANCH = 'main'
        // Environment variables for the application
        MONGO_URI = 'mongodb://mongodb:27017/telemedicine'
        JWT_SECRET = 'your_jwt_secret_key_here'
        PORT = '5000'
        REACT_APP_API_BASE_URL = 'http://localhost:5000'
        // Deployment method: 'ansible', 'kubernetes', or 'docker'
        DEPLOYMENT_METHOD = 'kubernetes'
        // Kubernetes config credentials
        KUBECONFIG = credentials('kubeconfig-credentials')
    }
    
    stages {
        stage('Checkout from GitHub') {
            steps {
                // Clean workspace before checkout
                deleteDir()
                
                // Checkout code from GitHub repository
                git branch: "${GITHUB_BRANCH}", 
                    url: "${GITHUB_REPO}"
                
                echo "Successfully cloned repository from GitHub"
                
                // Debug: List directory contents
                sh 'ls -la'
                sh 'find . -name "Telemedicine-app/docker-compose.yml" || echo "docker-compose.yml not found"'
            }
        }
        
        stage('Create Environment Files') {
            steps {
                script {
                    // Create backend .env file
                    writeFile file: 'Telemedicine-app/.env', text: """
MONGO_URI=${env.MONGO_URI}
JWT_SECRET=${env.JWT_SECRET}
PORT=${env.PORT}
"""
                    
                    // Create frontend .env file
                    writeFile file: 'Telemedicine-app/client/.env', text: """
REACT_APP_API_BASE_URL=${env.REACT_APP_API_BASE_URL}
"""
                    
                    echo "Environment files created successfully"
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    // Login to Docker Hub
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKER_USERNAME --password-stdin'
                    
                    // Check if Docker is installed
                    sh 'docker --version || echo "Docker not installed"'
                    
                    // List directory contents to debug
                    sh 'ls -la Telemedicine-app/'
                    sh 'ls -la Telemedicine-app/client/ || echo "Client directory not found"'
                    
                    // Check if Dockerfile exists
                    sh 'cat Telemedicine-app/Dockerfile || echo "Dockerfile not found"'
                    sh 'cat Telemedicine-app/client/Dockerfile || echo "Client Dockerfile not found"'
                    sh 'cat Telemedicine-app/Dockerfile.mongo || echo "MongoDB Dockerfile not found"'
                    
                    // Build MongoDB image
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management:${APP_VERSION} -f Dockerfile.mongo .
                    """
                    
                    // Build backend image directly with Docker
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management_backend:${APP_VERSION} .
                    """
                    
                    // Build frontend image directly with Docker
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management_frontend:${APP_VERSION} -f client/Dockerfile client/
                    """
                    
                    echo "Successfully built Docker images"
                }
            }
        }
        
        stage('Push Images to Docker Hub') {
            steps {
                script {
                    // Push MongoDB image
                    sh "docker push $DOCKER_USERNAME/e_health_management:$APP_VERSION"
                    
                    // Push backend image
                    sh "docker push $DOCKER_USERNAME/e_health_management_backend:$APP_VERSION"
                    
                    // Push frontend image
                    sh "docker push $DOCKER_USERNAME/e_health_management_frontend:$APP_VERSION"
                    
                    echo "Successfully pushed all images to Docker Hub"
                }
            }
        }
        
        stage('Install Required Tools') {
            steps {
                script {
                    // Verify Ansible is available
                    sh '''
                    ansible --version || echo "Ansible not working properly"
                    '''
                    
                    // Check if kubectl is installed (for Kubernetes deployment)
                    sh '''
                    kubectl version --client || echo "kubectl not installed"
                    '''
                    
                    // Install kubectl if not available (without using sudo)
                    sh '''
                    if ! command -v kubectl &> /dev/null; then
                        echo "Installing kubectl..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mkdir -p ${HOME}/.local/bin
                        mv kubectl ${HOME}/.local/bin/
                        export PATH=${HOME}/.local/bin:$PATH
                        echo "kubectl installed to ${HOME}/.local/bin/kubectl"
                    fi
                    '''
                }
            }
        }
        
        stage('Deploy with Ansible') {
            when {
                expression { return env.DEPLOYMENT_METHOD == 'ansible' }
            }
            steps {
                script {
                    // Run Ansible playbook
                    sh '''
                    cd Telemedicine-app/ansible
                    ansible-playbook -i inventory.ini site.yml -c local
                    '''
                    
                    echo "Application deployed successfully with Ansible"
                }
            }
        }
        
        stage('Deploy with Kubernetes') {
            when {
                expression { return env.DEPLOYMENT_METHOD == 'kubernetes' }
            }
            steps {
                script {
                    // Debug: Check if we can connect to the cluster
                    sh '''
                    echo "Checking Kubernetes cluster connection..."
                    export PATH=${HOME}/.local/bin:$PATH
                    export KUBECONFIG=${KUBECONFIG}
                    kubectl cluster-info
                    kubectl get nodes
                    '''
                    
                    // Verify kubectl can connect to the cluster
                    sh '''
                    export PATH=${HOME}/.local/bin:$PATH
                    export KUBECONFIG=${KUBECONFIG}
                    
                    kubectl cluster-info || {
                        echo "Error: Cannot connect to Kubernetes cluster"
                        exit 1
                    }
                    '''
                    
                    // Check if namespace exists and create it if not
                    sh '''
                    export PATH=${HOME}/.local/bin:$PATH
                    export KUBECONFIG=${KUBECONFIG}
                    
                    kubectl get namespace telemedicine || kubectl create namespace telemedicine
                    '''
                    
                    // Create base64 encoded JWT secret
                    sh '''
                    export PATH=${HOME}/.local/bin:$PATH
                    export KUBECONFIG=${KUBECONFIG}
                    
                    JWT_SECRET_BASE64=$(echo -n "$JWT_SECRET" | base64)
                    
                    # Update the secret.yaml file with the actual JWT secret
                    sed -i "s/JWT_SECRET: .*/JWT_SECRET: $JWT_SECRET_BASE64/" Telemedicine-app/kubernetes/secret.yaml
                    
                    # Make the deploy.sh script executable
                    chmod +x Telemedicine-app/kubernetes/deploy.sh
                    
                    # Debug: List kubernetes directory contents
                    ls -la Telemedicine-app/kubernetes/
                    '''
                    
                    // Check if ingress controller is installed
                    sh '''
                    export PATH=${HOME}/.local/bin:$PATH
                    export KUBECONFIG=${KUBECONFIG}
                    
                    if ! kubectl get ingressclass 2>/dev/null | grep -q "nginx"; then
                        echo "Warning: No ingress controller found. You may need to install one."
                        echo "For example: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml"
                    fi
                    '''
                    
                    // Modify deploy.sh to use the correct kubeconfig
                    sh '''
                    # Add KUBECONFIG export to the beginning of deploy.sh
                    sed -i "1a\\nexport KUBECONFIG=${KUBECONFIG}" Telemedicine-app/kubernetes/deploy.sh
                    '''
                    
                    // Deploy using the deploy.sh script
                    sh '''
                    export PATH=${HOME}/.local/bin:$PATH
                    export KUBECONFIG=${KUBECONFIG}
                    
                    cd Telemedicine-app/kubernetes
                    ./deploy.sh
                    '''
                    
                    // Verify deployment
                    sh '''
                    export PATH=${HOME}/.local/bin:$PATH
                    export KUBECONFIG=${KUBECONFIG}
                    
                    echo "Checking deployment status..."
                    kubectl get pods -n telemedicine
                    kubectl get svc -n telemedicine
                    kubectl get ingress -n telemedicine || echo "No ingress resources found"
                    
                    # Check if frontend NodePort service was created as a fallback
                    kubectl get svc frontend-nodeport -n telemedicine && {
                        echo "Frontend is available via NodePort service"
                        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
                        echo "You can access the frontend at: http://$NODE_IP:30080"
                    } || echo "No NodePort service found"
                    '''
                    
                    echo "Application deployed successfully with Kubernetes"
                }
            }
        }
        
        stage('Deploy with Docker (Fallback)') {
            when {
                expression { return env.DEPLOYMENT_METHOD == 'docker' }
            }
            steps {
                script {
                    // Deploy using Docker run commands instead of docker-compose
                    sh """
                    # Stop and remove existing containers
                    docker stop e_health_backend || true
                    docker stop e_health_frontend || true
                    docker stop mongodb || true
                    docker rm e_health_backend || true
                    docker rm e_health_frontend || true
                    docker rm mongodb || true
                    
                    # Create a Docker network
                    docker network create telemedicine-network || true
                    
                    # Run MongoDB container
                    docker run -d --name mongodb -p 27017:27017 --network telemedicine-network ${DOCKER_USERNAME}/e_health_management:${APP_VERSION}
                    
                    # Run backend container
                    docker run -d --name e_health_backend -p 5000:5000 --env-file Telemedicine-app/.env --network telemedicine-network ${DOCKER_USERNAME}/e_health_management_backend:${APP_VERSION}
                    
                    # Run frontend container
                    docker run -d --name e_health_frontend -p 3000:3000 --env-file Telemedicine-app/client/.env --network telemedicine-network ${DOCKER_USERNAME}/e_health_management_frontend:${APP_VERSION}
                    """
                    
                    echo "Application deployed successfully with Docker"
                }
            }
        }
    }
    
    post {
        always {
            // Logout from Docker Hub
            sh 'docker logout'
            
            // Clean up unused Docker resources
            sh 'docker system prune -af --volumes || true'
            
            // Clean up sensitive files
            sh 'rm -f Telemedicine-app/.env Telemedicine-app/client/.env || true'
            
            echo "Pipeline completed - cleanup executed"
        }
        
        success {
            echo 'Deployment completed successfully!'
        }
        
        failure {
            echo 'Deployment failed! Check logs for details.'
        }
    }
}
