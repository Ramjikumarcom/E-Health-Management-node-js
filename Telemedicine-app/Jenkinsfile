pipeline {
    agent any
    
    environment {
        // GitHub repository URL
        REPO_URL = 'https://github.com/Ramjikumarcom/E-Health-Management-node-js.git'
        // DockerHub credentials ID (needs to be configured in Jenkins)
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        // Docker image names with tags
        MONGO_IMAGE = 'gupta9939/e_health_management:03'
        BACKEND_IMAGE = 'gupta9939/e_health_management_backend:03'
        FRONTEND_IMAGE = 'gupta9939/e_health_management_frontend:03'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Clean workspace before checkout
                cleanWs()
                echo 'Checking out code from GitHub repository'
                git url: "${REPO_URL}", branch: 'main'
            }
        }
        
        stage('Build Docker Images') {
            steps {
                echo 'Building Docker images'
                
                // Build MongoDB image
                sh 'docker build -t ${MONGO_IMAGE} -f Dockerfile.mongo .'
                
                // Build Backend image
                sh 'docker build -t ${BACKEND_IMAGE} -f Dockerfile .'
                
                // Build Frontend image
                sh 'docker build -t ${FRONTEND_IMAGE} -f client/Dockerfile ./client'
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo 'Pushing Docker images to DockerHub'
                
                // Login to DockerHub
                sh 'echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin'
                
                // Push all images
                sh 'docker push ${MONGO_IMAGE}'
                sh 'docker push ${BACKEND_IMAGE}'
                sh 'docker push ${FRONTEND_IMAGE}'
                
                // Logout from DockerHub
                sh 'docker logout'
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images to save space
            sh 'docker system prune -f'
        }
        success {
            echo 'Pipeline completed successfully! Images have been built and pushed to DockerHub.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
